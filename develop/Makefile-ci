##############################################################################
# Run:
#    make
#    make start
#
# Go to:
#
#     http://localhost:8080
#
# Create a new Plone Site (admin:admin)
#
##############################################################################
# SETUP MAKE
#
## Defensive settings for make: https://tech.davis-hansson.com/p/make/
SHELL:=bash
.ONESHELL:
# for Makefile debugging purposes add -x to the .SHELLFLAGS
.SHELLFLAGS:=-eu -o pipefail -O inherit_errexit -c
.SILENT:
.DELETE_ON_ERROR:
MAKEFLAGS+=--warn-undefined-variables
MAKEFLAGS+=--no-builtin-rules

# Colors
# OK=Green, warn=yellow, error=red
ifeq ($(TERM),)
# no colors if not in terminal
	MARK_COLOR=
	OK_COLOR=
	WARN_COLOR=
	ERROR_COLOR=
	NO_COLOR=
else
	MARK_COLOR=`tput setaf 6`
	OK_COLOR=`tput setaf 2`
	WARN_COLOR=`tput setaf 3`
	ERROR_COLOR=`tput setaf 1`
	NO_COLOR=`tput sgr0`
endif

##############################################################################
# SETTINGS AND VARIABLE

PLONE_VERSION=6.0.15
#`docker run -i --rm eeacms/plone-backend env | grep PLONE_VERSION | sed "s/PLONE_VERSION=//g"`
PYTHON?=python3.11

# Top-level targets
.PHONY: all
all: bootstrap install-uv develop

.PHONY: clean
clean:			## Cleanup environment
	rm -rf bin include lib lib64 inituser pyvenv.cfg *.egg-info node_modules

.PHONY: bootstrap
bootstrap:		## Bootstrap python environment
	@if command -v uv >/dev/null 2>&1; then \
		echo "Using uv for environment management (no venv needed)"; \
		uv venv; \
		uv pip install mxdev -c "https://dist.plone.org/release/$(PLONE_VERSION)/constraints.txt"; \
	else \
		$(PYTHON) -m venv .; \
		bin/pip install --upgrade pip mxdev -c "https://dist.plone.org/release/$(PLONE_VERSION)/constraints.txt"; \
	fi

.PHONY: install
install:		## Install Plone and develop add-ons
	bin/pip install Plone plone.volto -c "https://dist.plone.org/release/$(PLONE_VERSION)/constraints.txt"
	bin/pip install -c "https://dist.plone.org/release/$(PLONE_VERSION)/constraints.txt"
	bin/mkwsgiinstance -d . -u admin:admin
	mkdir -p var/blobstorage var/filestorage

	# Fast install using uv if available
.PHONY: install-uv
install-uv: ## Install Plone and develop add-ons using uv
	@if command -v uv >/dev/null 2>&1; then \
 		uv pip install --constraints "https://dist.plone.org/release/$(PLONE_VERSION)/constraints.txt" Plone plone.volto; \
		uv run mkwsgiinstance -d . -u admin:admin; \
		mkdir -p var/blobstorage var/filestorage; \
	else \
		echo "uv not found, please install uv or use 'make install'"; \
	fi
.PHONY: develop
develop:		## Develop source.ini add-ons using mxdev
	uv pip install -r ../requirements.txt -c ../constraints.txt
	uv pip install plone.autoinclude==2.0.0
	uv run mxdev -c sources.ini
	uv pip install -r requirements-mxdev.txt

.PHONY: status
status: 		## Check sources for changes
	./scripts/status.sh

.PHONY: pull
pull:			## Pull sources from git
	./scripts/pull.sh

.PHONY: start
start:			## Start Plone backend (standalone)
	uv run runwsgi -v etc/zope.ini config_file=zope.conf
start-ci:
	nohup uv run runwsgi -v etc/zope.ini config_file=zope.conf > zope.log 2>&1 &

.PHONY: help
help:			## Show this help.
	@echo -e "$$(grep -hE '^\S+:.*##' $(MAKEFILE_LIST) | sed -e 's/:.*##\s*/:/' -e 's/^\(.\+\):\(.*\)/\\x1b[36m\1\\x1b[m:\2/' | column -c2 -t -s :)"
	head -n 12 Makefile
